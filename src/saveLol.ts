import { DataMapper } from "@aws/dynamodb-data-mapper";
import AWS from "aws-sdk";
import {
  attribute,
  autoGeneratedHashKey,
  rangeKey,
  table,
} from "@aws/dynamodb-data-mapper-annotations";

const client = new AWS.DynamoDB();
export const mapper = new DataMapper({ client });

if (!process.env.LOL_TABLE_NAME) {
  throw new Error("missing table name");
}

// https://aws.amazon.com/blogs/developer/introducing-the-amazon-dynamodb-datamapper-for-javascript-developer-preview/

export class User {
  @attribute()
  id: number;

  @attribute()
  username?: string;

  constructor(id: number, username?: string) {
    this.id = id;
    this.username = username;
  }
}

@table(process.env.LOL_TABLE_NAME)
export class Lol {
  @autoGeneratedHashKey()
  id: string;

  @attribute()
  chatId: number;

  @attribute()
  fromUser: User;

  @attribute()
  toUser: User;

  @rangeKey()
  createdAt: Date;

  static create(chatId: number, fromUser: User, toUser: User): Lol {
    const lol = new Lol();
    lol.fromUser = fromUser;
    lol.toUser = toUser;
    lol.createdAt = new Date();
    lol.chatId = chatId;
    return lol;
  }
}

export async function saveLol(lols: Lol[]): Promise<Lol[]> {
  const promises = lols.map((lol) => mapper.put(lol));
  return Promise.all(promises);
}
